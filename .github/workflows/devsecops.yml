name: DevSecOps Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  # CODE PHASE
  secure-code:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
            
      - name: Run Bandit (SAST for Python)
        run: |
          pip install bandit
          bandit -r . -f json -o bandit-results.json || true
      
      - name: Run Gitleaks (Secret Scanner)
        uses: gitleaks/gitleaks-action@v2
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Upload Bandit results
        uses: actions/upload-artifact@v4
        with:
          name: bandit-results
          path: bandit-results.json
        if: always()

  # SEMGREP STEP
  semgrep-sast:
    name: Semgrep-SAST
    runs-on: ubuntu-20.04
    container:
      image: semgrep/semgrep
    steps:
      - uses: actions/checkout@v4
      - name: Semgrep scan
        run: |
          # Run Semgrep scan and store the output in JSON
          semgrep scan --json --json-output /tmp/semgrep.json
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}
      
      - name: Upload Semgrep results
        uses: actions/upload-artifact@v4
        with:
          name: semgrep-results
          path: /tmp/semgrep.json
        if: always()

  # BUILD PHASE
  secure-build:
    runs-on: ubuntu-latest
    needs: [secure-code, semgrep-sast]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Run Safety (Python dependencies)
        run: |
          pip install safety
          pip install -r app/requirements.txt || pip install flask requests
          pip freeze > requirements.txt
          safety check -r requirements.txt --json > safety-results.json || true
      
      - name: Build Docker image
        run: |
          if [ -f Dockerfile ]; then
            docker build -t my-app:latest .
          else
            echo "FROM python:3.10-slim
            WORKDIR /app
            COPY app/ /app/
            RUN pip install -r requirements.txt || pip install flask requests
            CMD [\"python\", \"app.py\"]" > Dockerfile
            docker build -t my-app:latest .
          fi
      
      - name: Run Trivy (Container Scanning)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'my-app:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'
        continue-on-error: true
      
      - name: Upload build security results
        uses: actions/upload-artifact@v4
        with:
          name: build-security-results
          path: |
            safety-results.json
            trivy-results.sarif
        if: always()

  # CODE COVERAGE STAGE (NEW)
  code-coverage:
    runs-on: ubuntu-latest
    needs: [secure-code]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov coverage
          pip install -r app/requirements.txt || pip install flask requests
      
      - name: Run coverage
        run: |
          # Create directories if they don't exist
          mkdir -p app
          mkdir -p tests
          
          # If no tests exist, create a simple test file
          if [ ! -f app/test_app.py ] && [ ! -f tests/test_app.py ]; then
            echo "Creating sample test file for coverage demo"
            if [ -f app/app.py ]; then
              echo "import unittest
              import sys
              import os
              
              # Add app directory to path
              sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
              
              from app.app import app
              
              class TestApp(unittest.TestCase):
                  def test_home(self):
                      client = app.test_client()
                      response = client.get('/')
                      self.assertEqual(response.status_code, 200)
                      
              if __name__ == '__main__':
                  unittest.main()" > tests/test_app.py
            else
              echo "import unittest
              
              class TestSample(unittest.TestCase):
                  def test_sample(self):
                      self.assertEqual(1, 1)
                      
              if __name__ == '__main__':
                  unittest.main()" > tests/test_app.py
            fi
          fi
          
          # Run coverage
          coverage run -m pytest tests/ app/ --cov=app --cov-report=xml:coverage.xml --cov-report=html:coverage_html || echo "Tests failed but continuing"
      
      - name: Generate coverage report
        run: |
          coverage report
          
          # Create a markdown report
          echo "# Code Coverage Report" > coverage-report.md
          echo "Generated on $(date)" >> coverage-report.md
          echo "" >> coverage-report.md
          echo "## Summary" >> coverage-report.md
          echo '```' >> coverage-report.md
          coverage report >> coverage-report.md
          echo '```' >> coverage-report.md
          
          echo "" >> coverage-report.md
          echo "## Details" >> coverage-report.md
          echo "See HTML report in artifacts for detailed coverage information." >> coverage-report.md
      
      - name: Upload coverage results
        uses: actions/upload-artifact@v4
        with:
          name: code-coverage-results
          path: |
            coverage.xml
            coverage_html/
            coverage-report.md
        if: always()

  # TEST PHASE WITH UNIT TESTS
  unit-testing:
    runs-on: ubuntu-latest
    needs: secure-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      
      - name: Run unit tests with coverage
        run: |
          pip install pytest pytest-cov flask requests
          pytest app/test_app.py --cov=app --cov-report=xml:coverage.xml || echo "No tests found"
        continue-on-error: true
      
      - name: Upload test coverage results
        uses: actions/upload-artifact@v4
        with:
          name: test-coverage-results
          path: coverage.xml
        if: always()

  # DAST TESTING WITH OWASP ZAP - Fixed to ensure reports are generated
  dast-testing:
    runs-on: ubuntu-latest
    needs: secure-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy sample app for testing
        run: |
          pip install flask requests
          # Start the Flask app in the background
          nohup python -c "
          from flask import Flask
          app = Flask(__name__)
          @app.route('/')
          def home(): return 'Hello, DevSecOps!'
          @app.route('/api/data')
          def data(): return {'data': 'test'}
          if __name__ == '__main__': app.run(host='0.0.0.0', port=8080)
          " &
          # Wait for app to start
          sleep 5
          # Verify it's running
          curl http://localhost:8080/ || echo "App not started correctly"
      
      - name: ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.14.0
        with:
          target: 'http://localhost:8080'
          fail_action: false
          # Ensure reports are generated and correctly named
          cmd_options: '-r zap-report.html'
        continue-on-error: true
      
      # Create a markdown report if HTML report exists
      - name: Create ZAP Markdown Report
        run: |
          if [ -f zap-report.html ]; then
            echo "# ZAP Scan Results" > zap-report.md
            echo "Scan completed on $(date)" >> zap-report.md
            echo "## Summary" >> zap-report.md
            echo "ZAP baseline scan was performed against http://localhost:8080" >> zap-report.md
            # Extract alerts from HTML (basic approach)
            grep -A 3 "Alert" zap-report.html | sed 's/<[^>]*>//g' | grep -v "^$" >> zap-report.md || echo "No alerts found" >> zap-report.md
          else
            echo "# ZAP Scan Results" > zap-report.md
            echo "No scan results available" >> zap-report.md
          fi
        continue-on-error: true
      
      - name: Upload ZAP Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-results
          path: |
            zap-report.html
            zap-report.md
        if: always()

  # DEPLOY PHASE - Fixed Checkov parameters
  secure-deploy:
    runs-on: ubuntu-latest
    needs: [unit-testing, dast-testing]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        if: ${{ hashFiles('**/*.tf') != '' }}
      
      - name: Run tfsec (Terraform Security)
        uses: aquasecurity/tfsec-sarif-action@v0.1.4
        with:
          sarif_file: tfsec.sarif
        if: ${{ hashFiles('**/*.tf') != '' }}
        continue-on-error: true
      
      - name: Run Checkov (IaC security)
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          soft_fail: true
          output_format: sarif
          output_file_path: checkov.sarif  # Fix: changed parameter name
        continue-on-error: true
      
      - name: Upload deploy security results
        uses: actions/upload-artifact@v4
        with:
          name: deploy-security-results
          path: |
            tfsec.sarif
            checkov.sarif
        if: always()

  # GENERATE ENHANCED DETAILED REPORT
  security-report:
    runs-on: ubuntu-latest
    needs: [secure-code, semgrep-sast, secure-build, code-coverage, unit-testing, dast-testing, secure-deploy]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        continue-on-error: true
      
      - name: Set up Python for report processing
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
          
      - name: Install JSON processing tools
        run: pip install jq
      
      - name: Generate combined report
        run: |
          echo "# DevSecOps Pipeline Security Report" > combined-report.md
          echo "## Summary" >> combined-report.md
          echo "Pipeline run completed at $(date)" >> combined-report.md
          
          # SAST Results - Bandit
          echo "## SAST Results" >> combined-report.md
          echo "### Bandit Results" >> combined-report.md
          if [ -f "bandit-results/bandit-results.json" ]; then
            echo "Bandit found issues: $(grep -c "issue" bandit-results/bandit-results.json || echo "0")" >> combined-report.md
            echo "" >> combined-report.md
            echo "#### Top Findings:" >> combined-report.md
            
            # Process Bandit results
            python3 -c "
import json, sys
try:
    with open('bandit-results/bandit-results.json') as f:
        data = json.load(f)
        if 'results' in data:
            for i, issue in enumerate(data['results'][:5]):  # Show top 5 issues
                print(f\"- **{issue.get('issue_text', '')}**\")
                print(f\"  - Severity: {issue.get('issue_severity', '')}\")
                print(f\"  - Confidence: {issue.get('issue_confidence', '')}\")
                print(f\"  - File: {issue.get('filename', '')}:{issue.get('line_number', '')}\")
                print('')
            if len(data['results']) > 5:
                print(f\"- *And {len(data['results']) - 5} more issues...*\")
except Exception as e:
    print(f\"Error processing Bandit results: {e}\")
" >> combined-report.md
          else
            echo "No Bandit results found" >> combined-report.md
          fi
          
          # SAST Results - Semgrep
          echo "### Semgrep Results" >> combined-report.md
          if [ -f "semgrep-results/semgrep.json" ]; then
            echo "Semgrep found issues: $(grep -c "check_id" semgrep-results/semgrep.json || echo "0")" >> combined-report.md
            echo "" >> combined-report.md
            echo "#### Top Findings:" >> combined-report.md
            
            # Process Semgrep results
            python3 -c "
import json, sys
try:
    with open('semgrep-results/semgrep.json') as f:
        data = json.load(f)
        if 'results' in data:
            for i, result in enumerate(data['results'][:5]):  # Show top 5 issues
                print(f\"- **{result.get('check_id', '')}**\")
                print(f\"  - Message: {result.get('extra', {}).get('message', '')}\")
                print(f\"  - Path: {result.get('path', '')}:{result.get('start', {}).get('line', '')}\")
                print(f\"  - Severity: {result.get('extra', {}).get('severity', '')}\")
                print('')
            if len(data['results']) > 5:
                print(f\"- *And {len(data['results']) - 5} more issues...*\")
except Exception as e:
    print(f\"Error processing Semgrep results: {e}\")
" >> combined-report.md
          else
            echo "No Semgrep results found" >> combined-report.md
          fi
          
          # Code Coverage Results (NEW)
          echo "## Code Coverage Results" >> combined-report.md
          if [ -f "code-coverage-results/coverage-report.md" ]; then
            echo "Code coverage analysis completed:" >> combined-report.md
            echo "" >> combined-report.md
            # Include coverage report content
            grep -A 20 "## Summary" code-coverage-results/coverage-report.md >> combined-report.md
          else
            echo "No code coverage results found" >> combined-report.md
          fi
          
          # Dependency Scanning Results
          echo "## Dependency Scanning Results" >> combined-report.md
          if [ -f "build-security-results/safety-results.json" ]; then
            echo "Safety found issues: $(grep -c "vulnerability" build-security-results/safety-results.json || echo "0")" >> combined-report.md
            echo "" >> combined-report.md
            echo "#### Vulnerable Dependencies:" >> combined-report.md
            
            # Process Safety results
            python3 -c "
import json, sys
try:
    with open('build-security-results/safety-results.json') as f:
        data = json.load(f)
        if 'vulnerabilities' in data:
            for i, vuln in enumerate(data['vulnerabilities'][:5]):  # Show top 5 vulnerabilities
                print(f\"- **{vuln.get('package_name', '')}:** {vuln.get('vulnerability_id', '')}\")
                print(f\"  - Installed version: {vuln.get('installed_version', '')}\")
                print(f\"  - Vulnerable spec: {vuln.get('vulnerable_spec', '')}\")
                print(f\"  - CVE: {vuln.get('cve', 'N/A')}\")
                print('')
            if len(data['vulnerabilities']) > 5:
                print(f\"- *And {len(data['vulnerabilities']) - 5} more vulnerabilities...*\")
except Exception as e:
    print(f\"Error processing Safety results: {e}\")
" >> combined-report.md
          else
            echo "No Safety results found" >> combined-report.md
          fi
          
          # Container Scanning Results
          echo "## Container Scanning Results" >> combined-report.md
          if [ -f "build-security-results/trivy-results.sarif" ]; then
            echo "Trivy found vulnerabilities in container image:" >> combined-report.md
            echo "" >> combined-report.md
            
            # Process Trivy results
            python3 -c "
import json, sys
try:
    with open('build-security-results/trivy-results.sarif') as f:
        data = json.load(f)
        results = data.get('runs', [{}])[0].get('results', [])
        print(f\"Total vulnerabilities found: {len(results)}\")
        print('')
        severities = {}
        
        for result in results[:10]:  # Show top 10 vulnerabilities
            level = result.get('level', '')
            severities[level] = severities.get(level, 0) + 1
            
            print(f\"- **{result.get('ruleId', '')}**\")
            print(f\"  - Severity: {level}\")
            message = result.get('message', {}).get('text', '')
            print(f\"  - {message}\")
            print('')
            
        print(\"### Severity Breakdown:\")
        for sev, count in severities.items():
            print(f\"- {sev}: {count}\")
            
        if len(results) > 10:
            print(f\"\n- *And {len(results) - 10} more vulnerabilities...*\")
except Exception as e:
    print(f\"Error processing Trivy results: {e}\")
" >> combined-report.md
          else
            echo "No Trivy results found" >> combined-report.md
          fi
          
          # DAST Results
          echo "## DAST Results" >> combined-report.md
          if [ -f "zap-scan-results/zap-report.md" ]; then
            echo "OWASP ZAP scan completed." >> combined-report.md
            echo "" >> combined-report.md
            # Include content from ZAP report
            cat zap-scan-results/zap-report.md >> combined-report.md
          else
            echo "No OWASP ZAP results found" >> combined-report.md
          fi
          
          # IaC Scanning Results
          echo "## IaC Scanning Results" >> combined-report.md
          if [ -f "deploy-security-results/checkov.sarif" ]; then
            echo "Checkov found infrastructure code issues:" >> combined-report.md
            echo "" >> combined-report.md
            
            # Process Checkov results
            python3 -c "
import json, sys
try:
    with open('deploy-security-results/checkov.sarif') as f:
        data = json.load(f)
        results = data.get('runs', [{}])[0].get('results', [])
        print(f\"Total issues found: {len(results)}\")
        print('')
        
        for result in results[:5]:  # Show top 5 issues
            rule_id = result.get('ruleId', '')
            message = result.get('message', {}).get('text', '')
            level = result.get('level', '')
            location = result.get('locations', [{}])[0]
            file_path = location.get('physicalLocation', {}).get('artifactLocation', {}).get('uri', '')
            
            print(f\"- **{rule_id}**\")
            print(f\"  - Severity: {level}\")
            print(f\"  - File: {file_path}\")
            print(f\"  - Message: {message}\")
            print('')
            
        if len(results) > 5:
            print(f\"- *And {len(results) - 5} more issues...*\")
except Exception as e:
    print(f\"Error processing Checkov results: {e}\")
" >> combined-report.md
          else
            echo "No Checkov results found" >> combined-report.md
          fi
          
          echo "## Conclusion" >> combined-report.md
          echo "This report provides a summary of security issues detected during the pipeline run." >> combined-report.md
          echo "For full details, please download the individual artifacts from the GitHub Actions run." >> combined-report.md
          
          cat combined-report.md
      
      - name: Generate HTML Report
        run: |
          # Create HTML version of the report
          echo '<!DOCTYPE html>
          <html>
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>DevSecOps Security Report</title>
              <style>
                  body { font-family: Arial, sans-serif; line-height: 1.6; max-width: 1200px; margin: 0 auto; padding: 20px; }
                  h1, h2, h3, h4 { color: #333; }
                  h2 { border-bottom: 1px solid #ddd; padding-bottom: 5px; margin-top: 30px; }
                  .severity-high { color: #d73a49; }
                  .severity-medium { color: #f66a0a; }
                  .severity-low { color: #2cbe4e; }
                  .severity-critical { color: #b31d28; font-weight: bold; }
                  table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
                  th, td { padding: 8px; text-align: left; border-bottom: 1px solid #ddd; }
                  th { background-color: #f2f2f2; }
                  .summary-box { border: 1px solid #ddd; padding: 15px; margin: 15px 0; background-color: #f8f8f8; }
              </style>
          </head>
          <body>' > detailed-report.html
          
          # Convert markdown to basic HTML
          python3 -c "
import sys, os, re

def md_to_html(md_file, html_file):
    with open(md_file, 'r') as f:
        md_content = f.read()
    
    # Convert headers
    html_content = re.sub(r'^# (.*?)$', r'<h1>\1</h1>', md_content, flags=re.MULTILINE)
    html_content = re.sub(r'^## (.*?)$', r'<h2>\1</h2>', html_content, flags=re.MULTILINE)
    html_content = re.sub(r'^### (.*?)$', r'<h3>\1</h3>', html_content, flags=re.MULTILINE)
    html_content = re.sub(r'^#### (.*?)$', r'<h4>\1</h4>', html_content, flags=re.MULTILINE)
    
    # Convert lists
    html_content = re.sub(r'^- (.*?)$', r'<li>\1</li>', html_content, flags=re.MULTILINE)
    
    # Convert bold
    html_content = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', html_content)
    
    # Convert italics
    html_content = re.sub(r'\*(.*?)\*', r'<em>\1</em>', html_content)
    
    # Add color to severity mentions
    html_content = re.sub(r'Severity: CRITICAL|Severity: critical', r'Severity: <span class=\"severity-critical\">CRITICAL</span>', html_content, flags=re.IGNORECASE)
    html_content = re.sub(r'Severity: HIGH|Severity: high', r'Severity: <span class=\"severity-high\">HIGH</span>', html_content, flags=re.IGNORECASE)
    html_content = re.sub(r'Severity: MEDIUM|Severity: medium', r'Severity: <span class=\"severity-medium\">MEDIUM</span>', html_content, flags=re.IGNORECASE)
    html_content = re.sub(r'Severity: LOW|Severity: low', r'Severity: <span class=\"severity-low\">LOW</span>', html_content, flags=re.IGNORECASE)
    
    # Convert paragraphs (any line that isn't a header or list item)
    lines = html_content.split('\n')
    for i in range(len(lines)):
        if not re.match(r'^<(h[1-6]|li|ul|ol)', lines[i]) and lines[i].strip():
            lines[i] = f'<p>{lines[i]}</p>'
    
    html_content = '\n'.join(lines)
    
    # Add to HTML file
    with open(html_file, 'a') as f:
        f.write(html_content)

md_to_html('combined-report.md', 'detailed-report.html')
" 
          
          # Close the HTML
          echo '</body></html>' >> detailed-report.html
      
      - name: Upload combined reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            combined-report.md
            detailed-report.html

  # Generate comprehensive report with all findings
  comprehensive-report:
    runs-on: ubuntu-latest
    needs: [security-report]
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: "*"
        continue-on-error: true
      
      - name: Merge all findings
        run: |
          mkdir -p full-report
          
          # Copy all raw results to full report directory
          find . -type f -not -path "./full-report/*" -exec cp {} full-report/ \;
          
          # Create index file
          echo '<!DOCTYPE html>
          <html>
          <head>
              <meta charset="UTF-8">
              <title>DevSecOps Comprehensive Report</title>
              <style>
                  body { font-family: Arial, sans-serif; margin: 0; padding: 20px; }
                  .toc { background: #f8f8f8; padding: 20px; margin-bottom: 20px; }
                  h1 { color: #333; }
                  .file-list { list-style-type: none; padding: 0; }
                  .file-list li { margin: 10px 0; }
                  .file-list a { text-decoration: none; color: #0366d6; }
                  .file-list a:hover { text-decoration: underline; }
              </style>
          </head>
          <body>
              <h1>DevSecOps Comprehensive Security Report</h1>
              <p>Generated on $(date)</p>
              
              <div class="toc">
                  <h2>Table of Contents</h2>
                  <ul class="file-list">' > full-report/index.html
          
          # List all files in the report with links
          cd full-report
          for file in $(find . -type f -not -name "index.html" | sort); do
              filename=$(basename "$file")
              echo "<li><a href=\"$filename\">$filename</a></li>" >> index.html
          done
          
          # Close HTML
          echo '      </ul>
              </div>
              
              <h2>Security Summary</h2>
              <p>This report contains the raw output from all security tools run in the pipeline.</p>
              <p>For a more readable summary, see the <a href="detailed-report.html">detailed report</a>.</p>
          </body>
          </html>' >> index.html
      
      - name: Upload comprehensive report
        uses: actions/upload-artifact@v4
        with:
          name: comprehensive-report
          path: full-report/